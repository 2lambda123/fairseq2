# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

import os
from typing import List, Optional

from setuptools import Command, find_packages, setup
from setuptools.command.install import install as install_base
from setuptools.dist import Distribution as DistributionBase


class Distribution(DistributionBase):
    # We have to explicitly mark the distribution as non-pure since we will
    # inject our pre-built extension modules into it.
    def has_ext_modules(self) -> bool:
        return True


class install(install_base):
    distribution: Distribution

    install_base.sub_commands.append(("install_cmake", lambda self: True))

    # Old versions of distutils incorrectly check `ext_modules` to determine
    # whether a distribution is non-pure. We fix it here.
    def finalize_options(self) -> None:
        # Retrieve the value of `install_lib` before it gets overriden by the
        # base method.
        install_lib = self.install_lib

        install_base.finalize_options(self)

        # Unless the user has explicitly specified it, update `install_lib` to
        # point to the right location.
        if install_lib is None and self.distribution.has_ext_modules():
            self.install_lib = self.install_platlib


# We inject our pre-built extension modules and optionally other related
# artifacts into the distribution by installing them via CMake.
class install_cmake(Command):
    verbose: bool

    description = "install CMake artifacts"

    user_options = [
        ("install-dir=", "d", "directory to install to"),
    ]

    def initialize_options(self) -> None:
        self.install_dir: str = None  # type: ignore[assignment]

    def finalize_options(self) -> None:
        # If not specified, copy the value of `install_dir` from `install`
        # command's `install_lib` option.
        self.set_undefined_options("install", ("install_lib", "install_dir"))

    def run(self) -> None:
        # Inject all CMake artifacts (e.g. shared libraries) if we have a
        # standalone distribution.
        if "@INSTALL_STANDALONE@" == "true":
            self._cmake_install()

        self._cmake_install(component="python_modules")

    def _cmake_install(self, component: Optional[str] = None) -> None:
        cmd = ["cmake", "--install", "@PROJECT_BINARY_DIR@"]

        if component:
            cmd += ["--component", component]

        cmd += ["--prefix", self.install_dir, "--strip"]

        if self.verbose:
            cmd += ["--verbose"]

        self.spawn(cmd)

    def get_outputs(self) -> List[str]:
        outputs = []

        install_root = self.get_finalized_command("install").root  # type: ignore[attr-defined]

        # We have to strip the file paths to the installation root directory.
        if os.path.isabs(install_root):
            strip_idx = 0
        else:
            strip_idx = len(os.getcwd()) + 1

        # We extract the list of installed files from the CMake install manifest
        # file.
        def load_manifest(file: str) -> None:
            with open(os.path.join("@PROJECT_BINARY_DIR@", file)) as f:
                for line in f:
                    outputs.append(line[strip_idx:].rstrip())

        if "@INSTALL_STANDALONE@" == "true":
            load_manifest("install_manifest.txt")

        load_manifest("install_manifest_python_modules.txt")

        return outputs

    def get_inputs(self) -> List[str]:
        # We take no input from other commands.
        return []


def read_long_description() -> str:
    with open("README.md") as f:
        return f.read()


def main() -> None:
    setup(
        distclass=Distribution,
        cmdclass={
            "install": install,  # type: ignore[dict-item]
            "install_cmake": install_cmake,
        },
        name="fairseq2",
        version="0.1.0.dev0",
        description="FAIR Sequence Modeling Toolkit",
        long_description=read_long_description(),
        long_description_content_type="text/markdown",
        url="https://github.com/facebookresearch/fairseq2",
        license="MIT",
        author="Fundamental AI Research (FAIR) at Meta",
        keywords=["machine learning"],
        classifiers=[
            "Development Status :: 3 - Alpha",
            "Intended Audience :: Developers",
            "Intended Audience :: Science/Research",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.8",
            "Programming Language :: Python :: 3.9",
            "Programming Language :: Python :: 3.10",
            "Topic :: Scientific/Engineering :: Artificial Intelligence",
        ],
        package_dir={"": "src"},
        packages=find_packages(where="src"),
        package_data={"": ["py.typed", "*.pyi"]},
        zip_safe=False,
        python_requires=">=3.8",
        install_requires=[
            # PyTorch has no ABI compatibility between releases; this means we
            # have to ensure that we depend on the exact same version that was
            # used to build our extension modules.
            "torch==@TORCH_PEP440_VERSION@",
            "typing_extensions>=4.3.0",
        ],
    )


if __name__ == "__main__":
    main()
