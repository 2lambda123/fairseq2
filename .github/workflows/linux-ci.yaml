# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

name: CI (Linux)

on:
  pull_request:
    paths-ignore:
      - '**.md'
      - 'ci/**'

jobs:
  check_files:
    name: Check the modified files
    outputs:
      doc_only: ${{ steps.diff.outputs.doc_only }}
    runs-on: ubuntu-latest
    steps:
      - name: Check-out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Diff the last commit
        id: diff
        run: |
          doc_only=true

          # Check if all modified files are under the doc directory. If true,
          # we can skip building the entire project.
          for pathname in $(git diff --name-only origin/${{ github.base_ref }} HEAD); do
            if [[ $pathname != doc/* ]]; then
              doc_only=false

              break
            fi
          done

          echo doc_only=$doc_only >> "$GITHUB_OUTPUT"

  x86_64_pt112-build:
    name: Build the wheel (x86_64, py3.8, pt1.12.1, ${{ matrix.variant }}, nosan)
    needs: check_files
    if: needs.check_files.outputs.doc_only == 'false'
    strategy:
      matrix:
        variant: ['cpu', 'cu113']
    uses: ./.github/workflows/linux-build_wheel.yaml
    with:
      py: '3.8'
      torch: '1.12.1'
      arch: 'x86_64'
      variant: ${{ matrix.variant }}

  x86_64_pt112_cpu-test:
    name: Run the tests (x86_64, py3.8, pt1.12.1, cpu, nosan)
    needs: x86_64_pt112-build
    uses: ./.github/workflows/linux-run_tests.yaml
    with:
      py: '3.8'
      torch: '1.12.1'
      arch: 'x86_64'
      variant: 'cpu'

#  x86_64_pt112_cu113-test:
#    name: Run the tests (x86_64, py3.8, pt1.12.1, cu113_nosan)
#    needs: 86_64_pt112_cpu-test
#    uses: ./.github/workflows/linux-run_tests.yaml
#    with:
#      py: '3.8'
#      torch: '1.12.1'
#      arch: 'x86_64'
#      variant: 'cu113'
#      run_on_cuda: true

  x86_64_pt113-build:
    name: Build the wheel (x86_64, py3.8, pt1.13.1, ${{ matrix.variant }}, nosan)
    needs: check_files
    if: needs.check_files.outputs.doc_only == 'false'
    strategy:
      matrix:
        variant: ['cpu', 'cu116']
    uses: ./.github/workflows/linux-build_wheel.yaml
    with:
      py: '3.8'
      torch: '1.13.1'
      arch: 'x86_64'
      variant: ${{ matrix.variant }}

  x86_64_pt113_cpu-test:
    name: Run the tests (x86_64, py3.8, pt1.13.1, cpu, nosan)
    needs: x86_64_pt113-build
    uses: ./.github/workflows/linux-run_tests.yaml
    with:
      py: '3.8'
      torch: '1.13.1'
      arch: 'x86_64'
      variant: 'cpu'

#  x86_64_pt113_cu116-test:
#    name: Run the tests (x86_64, py3.8, pt1.13.1, cu113_nosan)
#    needs: 86_64_pt113_cpu-test
#    uses: ./.github/workflows/linux-run_tests.yaml
#    with:
#      py: '3.8'
#      torch: '1.13.1'
#      arch: 'x86_64'
#      variant: 'cu116'
#      run_on_cuda: true

  x86_64_pt20_cpu-build:
    name: Build the wheel (x86_64, py3.8, pt2.0, cpu, nosan)
    needs: check_files
    uses: ./.github/workflows/linux-build_wheel.yaml
    with:
      py: '3.8'
      torch: '2.0'
      arch: 'x86_64'
      variant: 'cpu'

  x86_64_pt20-build:
    name: Build the wheel (x86_64, py3.8, pt2.0, ${{ matrix.variant }}, ${{ matrix.sanitizers }})
    needs: check_files
    if: needs.check_files.outputs.doc_only == 'false'
    strategy:
      matrix:
        include:
          - variant: 'cpu'
            sanitizers: 'asan_ubsan'
#          - variant: 'cpu'
#            sanitizers: 'tsan'
          - variant: 'cu117'
            sanitizers: 'nosan'
    uses: ./.github/workflows/linux-build_wheel.yaml
    with:
      py: '3.8'
      torch: '2.0'
      arch: 'x86_64'
      variant: ${{ matrix.variant }}
      sanitizers: ${{ matrix.sanitizers }}

  x86_64_pt20_cpu-test:
    name: Run the tests (x86_64, py3.8, pt2.0, cpu, ${{ matrix.sanitizers }})
    needs: [x86_64_pt20_cpu-build, x86_64_pt20-build]
    strategy:
      matrix:
        sanitizers: ['nosan', 'asan_ubsan']
#        sanitizers: ['nosan', 'asan_ubsan', 'tsan']
    uses: ./.github/workflows/linux-run_tests.yaml
    with:
      py: '3.8'
      torch: '2.0'
      arch: 'x86_64'
      variant: 'cpu'
      sanitizers: ${{ matrix.sanitizers }}

#  x86_64_pt20_cu117-test:
#    name: Run the tests (x86_64, py3.8, pt2.0, cu116, nosan)
#    needs: 86_64_pt20_cpu-test
#    uses: ./.github/workflows/linux-run_tests.yaml
#    with:
#      py: '3.8'
#      torch: '2.0'
#      arch: 'x86_64'
#      variant: 'cu117'
#      run_on_cuda: true

  build_doc:
    name: Build the documentation
    needs: x86_64_pt20_cpu-build
    uses: ./.github/workflows/build_doc.yaml
    with:
      py: '3.8'
      torch: '2.0'
