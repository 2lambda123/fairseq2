# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

name: Build and test the package

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'ci/**'
      - 'doc/**'
      - '**.md'
  pull_request:
    paths-ignore:
      - 'ci/**'
      - 'doc/**'
      - '**.md'
  workflow_dispatch:

jobs:
  lint_cc:
    name: Lint (C++)
    uses: ./.github/workflows/_lint_cc.yaml
    with:
      build_variant: 'cu116'
      py: '3.8'
      torch: '1.12.1'

  lint_py_sh:
    name: Lint (Python, Shell)
    strategy:
      # Ensure that we get the results of all linters even if some of them fail.
      fail-fast: false
      matrix:
        py: ['3.8', '3.9', '3.10']
    uses: ./.github/workflows/_lint_py_sh.yaml
    with:
      py: ${{ matrix.py }}
      torch: '1.12.1'

  build_cpu:
    name: Build (CPU)
    needs: [lint_cc, lint_py_sh]
    strategy:
      matrix:
          py: ['3.8', '3.9', '3.10']
          torch: ['1.11', '1.12.1']
          sanitizers: ['nosan']
          include:
            - py: '3.10'
              torch: '1.12.1'
              sanitizers: 'asan_ubsan'
            - py: '3.10'
              torch: '1.12.1'
              sanitizers: 'tsan'
    uses: ./.github/workflows/_build.yaml
    with:
      build_variant: 'cpu'
      py: ${{ matrix.py }}
      torch: ${{ matrix.torch }}
      sanitizers: ${{ matrix.sanitizers }}

  # CUDA builds are slow. Let's first run the CPU tests and fail fast if
  # something is already broken.
  test_cpu:
    name: Test (CPU)
    needs: build_cpu
    strategy:
      matrix:
          py: ['3.8', '3.9', '3.10']
          torch: ['1.11', '1.12.1']
          sanitizers: ['nosan']
          # Test with ASan, UBSan, and TSan.
          include:
            - py: '3.10'
              torch: '1.12.1'
              sanitizers: 'asan_ubsan'
            - py: '3.10'
              torch: '1.12.1'
              sanitizers: 'tsan'
    uses: ./.github/workflows/_test.yaml
    with:
      build_variant: 'cpu'
      py: ${{ matrix.py }}
      torch: ${{ matrix.torch }}
      sanitizers: ${{ matrix.sanitizers }}

  build_cu113:
    name: Build (CUDA 11.3)
    needs: test_cpu
    strategy:
      matrix:
          py: ['3.8', '3.9', '3.10']
          torch: ['1.11', '1.12.1']
    uses: ./.github/workflows/_build.yaml
    with:
      build_variant: 'cu113'
      py: ${{ matrix.py }}
      torch: ${{ matrix.torch }}
      sanitizers: 'nosan'

  build_cu116:
    name: Build (CUDA 11.6)
    needs: build_cu113
    strategy:
      matrix:
          py: ['3.8', '3.9', '3.10']
          torch: ['1.12.1']
    uses: ./.github/workflows/_build.yaml
    with:
      build_variant: 'cu116'
      py: ${{ matrix.py }}
      torch: ${{ matrix.torch }}
      sanitizers: 'nosan'

  # TODO: Figure out how we can have GPU machines in FAIR's GitHub orgs.

  # GPU machines are expensive. Let's be frugal and test a single configuration
  # on a single machine first. If all tests succeed, we can fan out the rest of
  # the tests.
  test_cu113_onebox:
    name: Test one-box (CUDA 11.3)
    needs: build_cu116
    uses: ./.github/workflows/_test.yaml
    with:
      build_variant: 'cu113'
      py: '3.8'
      torch: '1.12.1'
      sanitizers: 'nosan'

  test_cu116_onebox:
    name: Test one-box (CUDA 11.6)
    needs: test_cu113_onebox
    uses: ./.github/workflows/_test.yaml
    with:
      build_variant: 'cu116'
      py: '3.8'
      torch: '1.12.1'
      sanitizers: 'nosan'

  # If we are here, it means all of our CPU and one-box GPU tests have
  # succeeded. Now we can kick off the rest of the GPU tests.
  test_cu113:
    name: Test (CUDA 11.3)
    needs: test_cu116_onebox
    strategy:
      matrix:
          py: ['3.8', '3.9', '3.10']
          torch: ['1.11', '1.12.1']
          # Already tested in the one-box step.
          exclude:
            - py: '3.8'
              torch: '1.12.1'
    uses: ./.github/workflows/_test.yaml
    with:
      build_variant: 'cu113'
      py: ${{ matrix.py }}
      torch: ${{ matrix.torch }}
      sanitizers: 'nosan'

  test_cu116:
    name: Test (CUDA 11.6)
    needs: test_cu113
    strategy:
      matrix:
          py: ['3.8', '3.9', '3.10']
          torch: ['1.12.1']
          # Already tested in the one-box step.
          exclude:
            - py: '3.8'
              torch: '1.12.1'
    uses: ./.github/workflows/_test.yaml
    with:
      build_variant: 'cu116'
      py: ${{ matrix.py }}
      torch: ${{ matrix.torch }}
      sanitizers: 'nosan'
