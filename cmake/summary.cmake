# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

include_guard(DIRECTORY)

function(fairseq2_print_configuration_summary)
    message(STATUS "")
    message(STATUS "******************** Summary ********************")
    message(STATUS "  CMake Version                     : ${CMAKE_VERSION}")
    message(STATUS "  CMake Command                     : ${CMAKE_COMMAND}")
    message(STATUS "  System                            : ${CMAKE_SYSTEM_NAME}")
    message(STATUS "  C++ Compiler                      : ${CMAKE_CXX_COMPILER}")
    message(STATUS "  C++ Compiler Version              : ${CMAKE_CXX_COMPILER_VERSION}")
    message(STATUS "  Python Version                    : ${Python3_VERSION}")
    message(STATUS "  Python Interpreter                : ${Python3_EXECUTABLE}")
    message(STATUS "  Torch Version                     : ${TORCH_VERSION}")
    message(STATUS "  Torch Library                     : ${TORCH_LIBRARY}")
    message(STATUS "  Build Type                        : ${CMAKE_BUILD_TYPE}")
    message(STATUS "")
    message(STATUS "  PROJECT_VERSION                   : ${PROJECT_VERSION}")
    message(STATUS "  FAIRSEQ2_BUILD_FOR_NATIVE         : ${FAIRSEQ2_BUILD_FOR_NATIVE}")
    message(STATUS "  FAIRSEQ2_TREAT_WARNINGS_AS_ERRORS : ${FAIRSEQ2_TREAT_WARNINGS_AS_ERRORS}")
    message(STATUS "  FAIRSEQ2_PERFORM_LTO              : ${FAIRSEQ2_PERFORM_LTO}")
    message(STATUS "  FAIRSEQ2_INSTALL_STANDALONE       : ${FAIRSEQ2_INSTALL_STANDALONE}")
    message(STATUS "  FAIRSEQ2_RUN_CLANG_TIDY           : ${FAIRSEQ2_RUN_CLANG_TIDY}")
    if(FAIRSEQ2_RUN_CLANG_TIDY)
        message(STATUS "    clang-tidy                      : ${FAIRSEQ2_CLANG_TIDY_EXECUTABLE}")
    endif()
    message(STATUS "  FAIRSEQ2_EDITABLE_PYTHON          : ${FAIRSEQ2_EDITABLE_PYTHON}")
    message(STATUS "  FAIRSEQ2_DEPENDENCY_SOURCE        : ${FAIRSEQ2_DEPENDENCY_SOURCE}")
    if(FMT_SOURCE_DIR)
        message(STATUS "    fmt                             : bundled")
    else()
        message(STATUS "    fmt                             : system (${fmt_VERSION})")
    endif()
    if(NOT TARGET GTest::gtest_main)
        message(STATUS "    gtest                           : -")
    elseif(gtest_SOURCE_DIR)
        message(STATUS "    gtest                           : bundled")
    else()
        message(STATUS "    gtest                           : system (${gtest_VERSION})")
    endif()
    if(pybind11_SOURCE_DIR)
        message(STATUS "    pybind11                        : bundled")
    else()
        message(STATUS "    pybind11                        : system (${pybind11_VERSION})")
    endif()
    message(STATUS "  FAIRSEQ2_USE_CUDA                 : ${FAIRSEQ2_USE_CUDA}")
    if(FAIRSEQ2_USE_CUDA)
        message(STATUS "    CUDA Version                    : ${CUDAToolkit_VERSION}")
        message(STATUS "    CUDA NVCC                       : ${CUDAToolkit_NVCC_EXECUTABLE}")
        message(STATUS "    CUDA Architectures              : ${CMAKE_CUDA_ARCHITECTURES}")
    endif()
    if(NOT FAIRSEQ2_SANITIZERS OR FAIRSEQ2_SANITIZERS STREQUAL "nosan")
        message(STATUS "  FAIRSEQ2_SANITIZERS               : -")
    else()
        message(STATUS "  FAIRSEQ2_SANITIZERS               : ${FAIRSEQ2_SANITIZERS}")
    endif()
    message(STATUS "")
endfunction()
