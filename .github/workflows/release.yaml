# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

name: Release

run-name: Relase (${{ inputs.release_type || 'nightly' }})

on:
  # At 1:15AM UTC on every Monday.
  schedule:
    - cron: '15 1 * * 1'
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        required: true
        options:
          - 'nightly'
          - 'rc'
          - 'stable'

jobs:
  lint_cc:
    name: Lint C++
    uses: ./.github/workflows/lint_cc.yaml

  lint_py:
    name: Lint Python
    uses: ./.github/workflows/lint_py.yaml

  lint_sh:
    name: Lint the shell scripts
    uses: ./.github/workflows/lint_sh.yaml

  linux_pt112-build:
    name: Build the wheel (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt1.12.1, ${{ matrix.variant }}, nosan)
    needs: [lint_cc, lint_py, lint_sh]
    strategy:
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
        variant: ['cpu', 'cu113', 'cu116']
    uses: ./.github/workflows/linux-build_wheel.yaml
    with:
      py: ${{ matrix.py }}
      torch: '1.12.1'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
      dev_stamp: ${{ github.event_name == 'schedule' || inputs.release_type == 'nightly' }}

  linux_pt112-test:
    name: Run the tests (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt1.12.1, ${{ matrix.variant }}, nosan)
    needs: linux_pt112-build
    strategy:
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
#        variant: ['cpu', 'cu113', 'cu116']
        variant: ['cpu']
    uses: ./.github/workflows/linux-run_tests.yaml
    with:
      py: ${{ matrix.py }}
      torch: '1.12.1'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
#      run_on_cuda:

  linux_pt113-build:
    name: Build the wheel (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt1.13.1, ${{ matrix.variant }}, ${{ matrix.sanitizers }})
    needs: [lint_cc, lint_py, lint_sh]
    strategy:
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
        variant: ['cpu', 'cu116']
    uses: ./.github/workflows/linux-build_wheel.yaml
    with:
      py: ${{ matrix.py }}
      torch: '1.13.1'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
      dev_stamp: ${{ github.event_name == 'schedule' || inputs.release_type == 'nightly' }}

  linux_pt113-test:
    name: Run the tests (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt1.13.1, ${{ matrix.variant }}, nosan)
    needs: linux_pt113-build
    strategy:
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
#        variant: ['cpu', 'cu116']
        variant: ['cpu']
    uses: ./.github/workflows/linux-run_tests.yaml
    with:
      py: ${{ matrix.py }}
      torch: '1.13.1'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
#      run_on_cuda:

  linux_pt20-build:
    name: Build the wheel (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt2.0, ${{ matrix.variant }}, ${{ matrix.sanitizers }})
    needs: [lint_cc, lint_py, lint_sh]
    strategy:
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
        variant: ['cpu', 'cu117', 'cu118']
        sanitizers: ['nosan']
        include:
          - py: '3.8'
            arch: 'x86_64'
            variant: 'cpu'
            sanitizers: 'asan_ubsan'
#          - py: '3.8'
#            arch: 'x86_64'
#            variant: 'cpu'
#            sanitizers: 'tsan'
    uses: ./.github/workflows/linux-build_wheel.yaml
    with:
      py: ${{ matrix.py }}
      torch: '2.0'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
      sanitizers: ${{ matrix.sanitizers }}
      dev_stamp: ${{ github.event_name == 'schedule' || inputs.release_type == 'nightly' }}

  linux_pt20-test:
    name: Run the tests (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt2.0, ${{ matrix.variant }}, nosan)
    needs: linux_pt20-build
    strategy:
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
#        variant: ['cpu', 'cu117', 'cu118']
        variant: ['cpu']
        sanitizers: ['nosan']
        run_integration: [false]
        exclude:
          - py: '3.8'
            arch: 'x86_64'
            variant: 'cpu'
        include:
          - py: '3.8'
            arch: 'x86_64'
            variant: 'cpu'
            sanitizers: 'nosan'
            run_integration: true
          - py: '3.8'
            arch: 'x86_64'
            variant: 'cpu'
            sanitizers: 'asan_ubsan'
            run_integration: false
#          - py: '3.8'
#            arch: 'x86_64'
#            variant: 'cpu'
#            sanitizers: 'tsan'
#            run_integration: false
    uses: ./.github/workflows/linux-run_tests.yaml
    with:
      py: ${{ matrix.py }}
      torch: '2.0'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
      sanitizers: ${{ matrix.sanitizers }}
#      run_on_cuda:

  build_doc:
    name: Build the documentation
    needs: linux_pt20-build
    uses: ./.github/workflows/build_doc.yaml
    with:
      py: '3.8'
      torch: '2.0'

  linux_pt112-publish:
    name: Publish the wheel (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt1.12.1, ${{ matrix.variant }})
    needs: [linux_pt112-test, linux_pt113-test, linux_pt20-test, build_doc]
    strategy:
      max-parallel: 1
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
        variant: ['cpu', 'cu113', 'cu116']
    uses: ./.github/workflows/publish_wheel.yaml
    with:
      release_type: ${{ inputs.release_type || 'nightly' }}
      py: ${{ matrix.py }}
      torch: '1.12.1'
      os: 'linux'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}

  linux_pt113-publish:
    name: Publish the wheel (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt1.13.1, ${{ matrix.variant }})
    needs: linux_pt112-publish
    strategy:
      max-parallel: 1
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
        variant: ['cpu', 'cu116']
    uses: ./.github/workflows/publish_wheel.yaml
    with:
      release_type: ${{ inputs.release_type || 'nightly' }}
      py: ${{ matrix.py }}
      torch: '1.13.1'
      os: 'linux'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}

  linux_pt20-publish:
    name: Publish the wheel (linux_${{ matrix.arch }}, py${{ matrix.py }}, pt2.0, ${{ matrix.variant }})
    needs: linux_pt113-publish
    strategy:
      max-parallel: 1
      matrix:
        py: ['3.8', '3.9', '3.10']
        arch: ['x86_64']
        variant: ['cpu', 'cu117', 'cu118']
    uses: ./.github/workflows/publish_wheel.yaml
    with:
      release_type: ${{ inputs.release_type || 'nightly' }}
      py: ${{ matrix.py }}
      torch: '2.0'
      os: 'linux'
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}

  publish-doc:
    name: Publish the documentation
    needs: linux_pt20-publish
    uses: ./.github/workflows/publish_doc.yaml
    with:
      nightly: ${{ github.event_name == 'schedule' || inputs.release_type == 'nightly' }}
